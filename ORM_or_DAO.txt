DAO: A data access object is a pattern that is often followed when an application needs to interact with some persistent data store (often a database). The DAO provides a series of operations to the rest of the application without the application needing to know the details of the data store. For example, there might be operations to retrieve a subset of data, update the data, or remove the data. It is much more generic than ORM - it simply is an object an application uses to retrieve data.
ORM: An ORM usually describes a library/API used to make interactions with a database more robust. Java has an ORM called JPA, which allows you to persist Java objects directly to a database without having to generate your own SQL statements. You generate Java objects (often called entities) that match the columns/tables of a database, populate the Java object, then called persist(object). It knows how to store itself in the database. When you query the database for data, it will return it in the form of Java objects, instead of the nasty ResultSet that you get when you are using JDBC with SQL.
In summary - a DAO is an object that abstract the implementation of a persistent data store away from the application and allows for simple interaction with it. A ORM is a robust library/API that provides a bunch of tools to save/retrieve an object directly to/from the database without having to write your own SQL statements.
EDIT: Note - they aren't opposing concepts (they actually go together quite well). It isn't uncommon for your DAO to use an ORM.
